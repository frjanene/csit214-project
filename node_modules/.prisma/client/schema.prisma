// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums for controlled values ---
enum UserRole {
  CUSTOMER
  ADMIN
}

enum MembershipTier {
  BASIC
  SILVER
  GOLD
  PLATINUM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// --- Database Models ---

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  hashedPassword String?
  role           UserRole @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  bookings   Booking[] // Một User có thể có nhiều Bookings
  membership Membership? // Một User chỉ có một Membership
}

model Lounge {
  id          String   @id @default(cuid())
  name        String
  airportCode String
  location    String
  capacity    Int
  amenities   String[] // e.g., ["Wi-Fi", "Showers"]
  imageUrl    String? // URL to the lounge image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  bookings Booking[] // Một Lounge có thể có nhiều Bookings
}

model Membership {
  id         String         @id @default(cuid())
  tier       MembershipTier @default(BASIC)
  memberId   String         @unique @default(cuid()) // e.g., BS123456
  startDate  DateTime       @default(now())
  expiryDate DateTime?

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // One-to-one relation with User
}

model Booking {
  id            String        @id @default(cuid())
  bookingCode   String        @unique @default(cuid()) // Public facing booking reference
  startTime     DateTime
  endTime       DateTime
  guestCount    Int           @default(0) // Number of additional guests
  totalPeople   Int // Total people = 1 (user) + guestCount
  status        BookingStatus @default(PENDING)
  totalCost     Float
  paymentStatus String        @default("UNPAID")
  flightNumber  String? // Flight number is optional but can be stored

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  lounge   Lounge @relation(fields: [loungeId], references: [id])
  loungeId String
}
